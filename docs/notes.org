* PG-DEPLOY
A simple deployment strategy.

Filepaths & examples given in this document have been sourced from
[[https://git.thinkproject.com/projects/CS/repos/cs_code/browse][cs_code (implicitly the root of paths)]], as of commit [[https://git.thinkproject.com/projects/CS/repos/cs_code/commits/183486a275f5b345c241f17159d598cfcc6668e7][183486a275f]].

- ~objects~: defined here as tables, indexes, functions, constraints.
- ~state~: refers to the definitions of all ~objects~ relative to a given version.
- ~version~: a record of a given ~state~ that incorporates time.

*** Reproducibility
*If you're following along inside emacs*, change the environment variables and
just exec the ~src~ blocks
*Otherwise*, copy out the command
#+begin_src shell :session pg-deploy
PG_INSTANCE='test928'
alias pse="psql --host dbdeva --port 8432 -d cs_$PG_INSTANCE -U csmaster"
# test pse
pse -c 'select * from information_schema.tables limit 10'
#+end_src

** Context
The goal is to observe a single source of truth for ~objects~, from which
an arbitrary ~state~ of an instance can be generated.

The current process of applying changes relies on scripts applied sequentially
from ~db/changesets/~; this makes it difficult to reason about the ~state~ given,
that their definition is sharded across an arbitrary number of scripts.

To bootstrap the ~state~: clean rebuild the instance, deploy all ~changesets~,
then extract the definitions for each ~object~ in the public schema with ~pg_dump~.

#+begin_src shell :session pg_deploy
pg_dump --host dbdeva --port 8432 --dbname "cs_$PG_INSTANCE" --user csmaster --schema-only --no-owner --no-privileges --table account_group

pg_dump --host dbdeva --port 8432 --dbname "cs_$PG_INSTANCE" --user csmaster \
  # dump only the object definitions (schema), not data.
  --schema-only    \
  # don't output commands to set ownership of objects to match the original database
  --no-owner       \
  # prevent dumping of access privileges (grant/revoke).
  --no-priviledges \
  # same rules apply as pg's \d
  --table account_group

#+end_src

*** Challenges
**** ~search_path~ >= 9.6
When baselining, it's necessary to dump as ~desired~; from this dump, we can
~pg_restore~ onto a target instance as ~desired~, then compute the diff and apply
the deltas to ~public~ to match ~desired~. However, ~pg_dump~ from postgres
>= 9.6 precludes the use of ~SET search_path TO foo_schema~:
#+begin_src pgplsql
CREATE SCHEMA desired;

SET search_path TO desired;

/* {... DUMP DDL ...} */
#+end_src

So, some text-processing is required to create the ~desired~ schema *in* the dump,
OR, to fire a rename over the ~public~ schema prior to ~pg_dump~, and revert when
finished:
#+begin_src pgplsql
ALTER SCHEMA public RENAME TO desired_state;
#+end_src
The reliance on a shell process here shouldn't be a problem, as we are already
executing dump/restore from this context.



** Application

*** Programmatic DDL
It's possible to rip the information for a given table out of the system
catalogs; the entire representation is available for datatypes, constraints,
defaults, and other dependency constructs.
[[file:./images/screenshot-01.png]]
#+begin_src sql 
CREATE OR REPLACE FUNCTION generate_create_table_statement(p_table_name varchar)
  RETURNS text AS
$BODY$
DECLARE
    v_table_ddl   text;
    column_record record;
BEGIN
    FOR column_record IN
        SELECT
            b.nspname as schema_name,
            b.relname as table_name,
            a.attname as column_name,
            pg_catalog.format_type(a.atttypid, a.atttypmod) as column_type,
            CASE WHEN
                (SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)
                 FROM   pg_catalog.pg_attrdef d
                 WHERE  d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef) IS NOT NULL THEN
                'DEFAULT '|| (SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)
                              FROM pg_catalog.pg_attrdef d
                              WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef)
            ELSE
                ''
            END as column_default_value,
            CASE WHEN a.attnotnull = true THEN
                'NOT NULL'
            ELSE
                'NULL'
            END as column_not_null,
            a.attnum as attnum,
            e.max_attnum as max_attnum
        FROM
            pg_catalog.pg_attribute a
            INNER JOIN
             (SELECT c.oid,
                n.nspname,
                c.relname
              FROM pg_catalog.pg_class c
                   LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
              WHERE c.relname ~ ('^('||p_table_name||')$')
                AND pg_catalog.pg_table_is_visible(c.oid)
              ORDER BY 2, 3) b
            ON a.attrelid = b.oid
            INNER JOIN
             (SELECT
                  a.attrelid,
                  max(a.attnum) as max_attnum
              FROM pg_catalog.pg_attribute a
              WHERE a.attnum > 0
                AND NOT a.attisdropped
              GROUP BY a.attrelid) e
            ON a.attrelid=e.attrelid
        WHERE a.attnum > 0
          AND NOT a.attisdropped
        ORDER BY a.attnum
    LOOP
        IF column_record.attnum = 1 THEN
            v_table_ddl:='CREATE TABLE '||column_record.schema_name||'.'||column_record.table_name||' (';
        ELSE
            v_table_ddl:=v_table_ddl||',';
        END IF;

        IF column_record.attnum <= column_record.max_attnum THEN
            v_table_ddl:=v_table_ddl||chr(10)||'
                     '||column_record.column_name||'
                     '||column_record.column_type||'
                     '||column_record.column_default_value||' '||column_record.column_not_null;
        END IF;
    END LOOP;

    v_table_ddl:=v_table_ddl||');';
    RETURN v_table_ddl;
END;
$BODY$
  LANGUAGE 'plpgsql'
#+end_src

#+begin_src sql
 CREATE OR REPLACE FUNCTION public.describe_table(p_schema_name character varying, p_table_name character varying)
  RETURNS SETOF text AS
$BODY$
DECLARE
    v_table_ddl   text;
    column_record record;
    table_rec record;
    constraint_rec record;
    firstrec boolean;
BEGIN
    FOR table_rec IN
        SELECT c.relname, c.oid FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
                WHERE relkind = 'r'
                AND n.nspname = 'testr'
                AND relname~ ('^('||'a'||')$')
          ORDER BY c.relname
    LOOP
        FOR column_record IN
            SELECT
                b.nspname as schema_name,
                b.relname as table_name,
                a.attname as column_name,
                pg_catalog.format_type(a.atttypid, a.atttypmod) as column_type,
                CASE WHEN
                    (SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)
                     FROM pg_catalog.pg_attrdef d
                     WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef) IS NOT NULL THEN
                    'DEFAULT '|| (SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)
                                  FROM pg_catalog.pg_attrdef d
                                  WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef)
                ELSE
                    ''
                END as column_default_value,
                CASE WHEN a.attnotnull = true THEN
                    'NOT NULL'
                ELSE
                    'NULL'
                END as column_not_null,
                a.attnum as attnum,
                e.max_attnum as max_attnum
            FROM
                pg_catalog.pg_attribute a
                INNER JOIN
                 (SELECT c.oid,
                    n.nspname,
                    c.relname
                  FROM pg_catalog.pg_class c
                       LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
                  WHERE c.oid = table_rec.oid
                  ORDER BY 2, 3) b
                ON a.attrelid = b.oid
                INNER JOIN
                 (SELECT
                      a.attrelid,
                      max(a.attnum) as max_attnum
                  FROM pg_catalog.pg_attribute a
                  WHERE a.attnum > 0
                    AND NOT a.attisdropped
                  GROUP BY a.attrelid) e
                ON a.attrelid=e.attrelid
            WHERE a.attnum > 0
              AND NOT a.attisdropped
            ORDER BY a.attnum
        LOOP -- _columns
            IF column_record.attnum = 1 THEN
                v_table_ddl:='CREATE TABLE '||column_record.schema_name||'.'||column_record.table_name||' (';
            ELSE
                v_table_ddl:=v_table_ddl||',';
            END IF;

            IF column_record.attnum <= column_record.max_attnum THEN
                v_table_ddl:=v_table_ddl||chr(10)||
                         '    '||column_record.column_name||' '||column_record.column_type||' '||column_record.column_default_value||' '||column_record.column_not_null;
            END IF;
        END LOOP;

        firstrec := TRUE;
        FOR constraint_rec IN
            SELECT conname, pg_get_constraintdef(c.oid) as constrainddef
                FROM pg_constraint c
                    WHERE conrelid=(
                        SELECT attrelid FROM pg_attribute
                        WHERE attrelid = (
                            SELECT oid FROM pg_class WHERE relname = table_rec.relname
                                AND relnamespace = (SELECT ns.oid FROM pg_namespace ns WHERE ns.nspname = p_schema_name)
                        ) AND attname='tableoid'
                    )
        LOOP
            v_table_ddl:=v_table_ddl||','||chr(10);
            v_table_ddl:=v_table_ddl||'CONSTRAINT '||constraint_rec.conname;
            v_table_ddl:=v_table_ddl||chr(10)||'    '||constraint_rec.constrainddef;
            firstrec := FALSE;
        END LOOP;
        v_table_ddl:=v_table_ddl||');';
        RETURN NEXT v_table_ddl;
    END LOOP;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
#+end_src
*** CONCAT all files
** Rollback
** Versioning
** Testing

https://github.com/thinkprojectgroup/query_cache


alias pse="psql --host dbdeva --port 8432 -d cs_$PG_INSTANCE -U csdeploy"
pse -c 'alter schema public RENAME desired'
rm -rf pgd.sql && pg_dump --host dbdeva --port 8432 --dbname "cs_$PG_INSTANCE" --user csdeploy --schema-only --no-owner --no-privileges -t '*' > pgd.sql
pse -c 'alter schema desired RENAME public'
