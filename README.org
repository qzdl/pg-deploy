*  =DEPLOY_TEST=
A proof-of-concept Postgres extension for maintaining database schemata, as an
extension.

The general process of taking the objects in a database to a new version

Advantages:
- Proper version control
    - Deployment by commit, or by tag; e.g. hotfix
    - Flexible to the semantic versioning scheme relevant to the project.
- Code generation based on the differences between objects
    - This applies for rollback, between versions, or arbitary 'dirty' states
      (e.g at development time)
    - catalog tables contian the necessary information to 'diff'
- Single source of truth for all declarations and changes to schemata.
- Automatic test generation for functional, structural, etc tests; using standard
  Postgres test framework.
- Can be deployed and used on local instances.
- Tests can be triggered by git hook.


** Workflow
*** Extension Install
Installation of the extension follows the standard Postgres Extension install process.

The server will not require a restart after install.

The procedure relies on ~gmake~, with tests through ~installcheck~ managed by
environment variables, as seen below.

For a full list of environment variables relevant to PG, refer the official [[https://www.postgresql.org/docs/current/libpq-envars.html][docs]]

Make the extension available for the instance, generate [[file:results/deploy_test.out][results/deploy_test.out]]
with the following commands -- and be sure to prepend ~sudo~ if the installation is
not governed by the executing user.

#+begin_src shell
make install
make installcheck -e PGPORT=YOUR_PG_PORT -e PGUSER=YOUR_PG_USER -e OTHERVAR=READ_THE_DOCS
#+end_src


** Usage
Prepare reference database (all changesets & scripts applied, etc).

Dump the current state of the database; this is the base for the initial commit.
- The ~--clean~ option to ~pg_dump~ will generate a ~DROP~ statement for each
  object:
#+begin_src shell
pg_dump --host localhost --port 8432 --dbname "something" --user postgres \
  --schema-only --no-owner --no-privileges  --clean --if-exists \
  | sed -e 's/CREATE TABLE/CREATE TABLE IF NOT EXISTS/g' \
  | grep -v DROP.TABLE > initial-commit-source.sql
#+end_src

- Adjust the newly created [[file:initial-commit-source.sql][initial-commit-source.sql]] according to your needs.

- Create the test suite in [[file:sql/][sql/]] as demonstrated.

- Run the tests, with copy step to expected
  #+begin_src shell
 make install
 make installcheck -e PGPORT=YOUR_PG_PORT -e PGUSER=YOUR_PG_USER -e OTHERVAR=READ_THE_DOCS
 cp results/deploy_test.out expected/deploy_test.out
 make installcheck -e PGPORT=YOUR_PG_PORT -e PGUSER=YOUR_PG_USER -e OTHERVAR=READ_THE_DOCS
  #+end_src

- Save the state (e.g. git commit / tag) if tests pass.

NOTE: If structural changes against the *current* version exist in the database,
      it should be possible to write the version held by the extension to a new
      schema that is not owned by the extension. From here, the process above
      can be followed to get a new baseline.

** TODO Deploy/Rollback
The procedure
** TODO Project Structure
*** [[file:sql/][sql/]]
This directory holds the sql scripts that generate the output for

*** TODO [[file:expected/][expected/]]





**  Troubleshooting
*** ~installcheck~: ~psql: FATAL:  role "root" does not exist~
By default, the user/role mapping will be used when attempting to establish a
connection to the target database.

If ~installcheck~ has been run as ~sudo make installcheck~, then the associated
~PGUSER~ that will be attempted with login will be ~root~, which is not
typically set up on the database server.

To fix, supply the ~PGUSER~ environment variable to ~make~ with the ~-e~ option:
#+begin_src shell
sudo make installcheck -e PGUSER='<user>'
#+end_src


If you get an error regarding peer authentication, refer [[~installcheck~: ~psql:
FATAL: Peer authentication failed for user "<USER>"~]]

*** ~installcheck~: ~psql: FATAL:  Peer authentication failed for user "<USER>"~
This error will likely arise when running ~make installcheck~ with supplying
environment variable ~PGUSER~.
